#include <iostream>
#include <math.h>
#include <random>

using namespace std;

class Point{

public:
    int dims = 0;
    double *points;
    int cluster_num = INT16_MAX;

public:
    double* getPoints(){
        return points;
    }

    int getPoint(int index){
        return points[index];
    }

    void setPoints(double *points){
        this->points = points;
    }
    
    void setPoint (int index, double point) {
         this->points[index] = point;
    }
    
    void setDim(int dims){
        this->dims = dims;
    }

    int getClusterNum(){
        return cluster_num;
    }

    void setClusterNum(int num){
        cluster_num = num;
    }

};


class NDimKMeans {

private:
    int dims = 0;
    int K = 0;
    int numPoints = 0;
    Point *points;

public:
    NDimKMeans(int dims, int K, int numPoints, Point *points) {
        this->dims = dims;
        this->K = K;
        this->numPoints = numPoints;
        this->points = points;
    }

public:
    int **getClusters() {

        Point *mean_p = new Point[numPoints];
        double **means = new double *[K];
        for (int i = 0; i < K; i++) means[i] = new double[dims];

        bool isFinished = false;
        bool isFirst = true;

        for (int i = 0; i < K; i++) {
            mean_p[i] = points[rand() % numPoints];
            mean_p[i].setClusterNum(i);
        }

        while (!isFinished) {
            for (int i = 0; i < numPoints; i++) {   //Go through All points

                double *test_p = points[i].getPoints();
                int min_index = 0;
                int min = INT16_MAX;

                for (int j = 0; j < K; j++) {
                    double dist = 0;
                    for (int l = 0; l < dims; l++) dist += pow(test_p[l] - mean_p[j].getPoints()[l], 2);
                    dist = sqrt(dist);
                    if (dist < min) {
                        min = dist;
                        min_index = j;
                    }
                }
                points[i].setClusterNum(min_index);
            }

            int* d = new int[K];
            int **means_temp = new int *[K];
            for (int i = 0; i < K; i++) means_temp[i] = new int[dims];
            
            for (int j = 0; j < dims; j++) {
                for (int l = 0; l < numPoints; l++) {
                    means[points[l].getClusterNum()][j] += points[l].getPoint(j);
                    d[points[l].getClusterNum()]++;
                }
                for(int l=0; l < K; l++)
                    for(int k=0; k < dims; k++) {
                        means_temp[l][k] /= d[l];
                        mean_p[l].setPoint(k,means_temp[l][k] /= d[l]);
                    }
            }
            
            if (isFirst) {
                int* d = new int[K];
                for (int j = 0; j < dims; j++) {
                    for (int l = 0; l < numPoints; l++) {
                        means[points[l].getClusterNum()][j] += points[l].getPoint(j);
                        d[points[l].getClusterNum()]++;
                    }
                    for(int l=0; l < K; l++)
                        for(int k=0; k < dims; k++) {
                            means[l][k] /= d[l];
                            mean_p[l].setPoint(k,means_temp[l][k] /= d[l]);
                        }
                }

                isFirst = false;
            }else {
                
                for(int i=0; i<K; i++)
                    for(int k=0; k<dims; k++)
                        if(means[i][k] != means_temp[i][k]) isFinished = true;
                
                }

            }

        }
};

int main() {

    int dims = 2;

    Point** points = new Point *[3]();
    Point* test_p = new Point[300];

    for(int i=0; i<3; i++){
        points[i] = new Point[100]();

        for(int j=0; j<100; j++){
            int *p = new int[dims];
            for(int k=0; k<dims; k++){p[k] = random()%(int)pow(10,i+1);}
            points[i][j].setPoints(p);
            points[i][j].setDim(dims);

            test_p[i].setPoints(p);
            test_p[i].setDim(dims);
        }
    }

    int **mean = new int*[3];

    for(int i=0; i<3; i++){
        mean[i] = new int[2];

        for(int j=0; j<100; j++) {
            mean[i][0] += points[i][j].getPoint(0);
            mean[i][1] += points[i][j].getPoint(1);
        }

        mean[i][0]/=100;
        mean[i][1]/=100;
    }


    NDimKMeans m(2, 3, 300, test_p);



   for(int i=0; i<3; i++){
       for(int j=0; j<100; j++){
           cout << points[i][j].getPoint(1) << endl;
       }
   }

    return 0;
}
